# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Require a recent version of vagrant otherwise some have reported errors setting host names on boxes
Vagrant.require_version ">= 1.6.2"
file_to_disk = './tmp/large_disk.vdi'

$vm_mem_size = (ENV['MEM_SIZE'] || "4096").to_i
Vagrant.configure(2) do |config|
  config.vm.define "kube-master" do |master|
    master.vm.synced_folder "../salt/", "/srv/"
    if ENV['NETWORK_TYPE'].to_s == "" then
      master.vm.network "public_network"
    end
    if ENV['NETWORK_TYPE'].to_s == "private"
      master.vm.network "private_network", type: "dhcp"
    end
    master.vm.provider :virtualbox do |v, override|
      override.vm.box = (ENV['BOX_NAME'] || "dekstroza/kube-overlay-xfs").to_s
      v.memory = $vm_mem_size
      v.cpus = $vm_cpus
      v.gui = false
      v.customize ["modifyvm", :id, "--nictype1", "virtio"]
      v.customize ["modifyvm", :id, "--nictype2", "virtio"]
      v.customize ["modifyvm", :id, "--cableconnected1", "on"]
      v.customize ["modifyvm", :id, "--cableconnected2", "on"]
      v.customize ['createhd', '--filename', file_to_disk, '--size', 500 * 1024]
      v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', file_to_disk]
      override.vm.provision :shell, :inline => (%q{
       ip=$(ip -f inet -o addr show eth1|cut -d\  -f 7 | cut -d/ -f 1)
       echo -e "roles:\n  - kube-master" >> /etc/salt/grains
       echo -e master_ip: $ip >> /etc/salt/grains
       echo -e nfs_ip: $ip >> /etc/salt/grains
       #/usr/sbin/ifconfig eth0 down && /usr/bin/sleep 2 && /usr/sbin/ifconfig eth0 up
       salt-call state.highstate -l quiet
       echo "#################################################################################"
       echo "# Please create route to your cloud by running:                                 #"
       echo "# 1. For MacOS, please run:   add-route-osX.sh                                  #"
       echo "# 2. For Linux, please run:   add-route-LIN.sh                                  #"
       echo "# 3. For Windows, please run: add-route-WIN.bat                                 #"
       echo "#                                                                               #"
       echo "#             SSH into machine with vagrant ssh command                         #"
       echo "#                         ~Have fun, Dejan~                                     #"
       echo "#################################################################################"
       exit
      }).strip
    end
    master.vm.provider :parallels do |v, override|
      override.vm.box = (ENV['BOX_NAME'] || "dekstroza/kube-overlay-xfs").to_s
      v.memory = $vm_mem_size
      v.cpus = $vm_cpus
      v.update_guest_tools = false
      # Set up Parallels folder sharing to behave like VirtualBox (i.e.,
      # mount the current directory as /vagrant and that's it)
      v.customize ['set', :id, '--shf-guest', 'off']
      v.customize ['set', :id, '--shf-guest-automount', 'off']
      v.customize ['set', :id, '--shf-host', 'on']
      v.customize ['set', :id, '--device-add', 'hdd']
      # Remove all auto-mounted "shared folders"; the result seems to
      # persist between runs (i.e., vagrant halt && vagrant up)
      override.vm.provision :shell, :inline => (%q{
        if [ -d /media/psf ]; then
          for i in /media/psf/*; do
            if [ -d "${i}" ]; then
              (umount "${i}" || true) > /dev/null 2>&1
              rmdir -v "${i}" > /dev/null 2>&1
            fi
          done
          rmdir -v /media/psf > /dev/null 2>&1
        fi
        ip=$(ip -f inet -o addr show eth1|cut -d\  -f 7 | cut -d/ -f 1) 
        echo -e "roles:\n  - kube-master" >> /etc/salt/grains
        echo -e master_ip: $ip >> /etc/salt/grains
        echo -e nfs_ip: $ip >> /etc/salt/grains
        /usr/sbin/ifconfig eth0 down && /usr/bin/sleep 2 && /usr/sbin/ifconfig eth0 up
        salt-call state.highstate -l quiet
        echo "#################################################################################"
	echo "# Please create route to your cloud by running:                                 #"
	echo "# 1. For MacOS, please run:   add-route-osX.sh                                  #"
	echo "# 2. For Linux, please run:   add-route-LIN.sh                                  #"
	echo "# 3. For Windows, please run: add-route-WIN.bat                                 #"
	echo "#                                                                               #"
	echo "#             SSH into machine with vagrant ssh command                         #"
	echo "#                         ~Have fun, Dejan~                                     #"
	echo "#################################################################################"
        exit
      }).strip
    end
  end

# Give access to all physical cpu cores
# Previously cargo-culted from here:
# http://www.stefanwrobel.com/how-to-make-vagrant-performance-not-suck
# Rewritten to actually determine the number of hardware cores instead of assuming
# that the host has hyperthreading enabled.
host = RbConfig::CONFIG['host_os']
if host =~ /darwin/
  $vm_cpus = `sysctl -n hw.physicalcpu`.to_i
elsif host =~ /linux/
  #This should work on most processors, however it will fail on ones without the core id field.
  #So far i have only seen this on a raspberry pi. which you probably don't want to run vagrant on anyhow...
  #But just in case we'll default to the result of nproc if we get 0 just to be safe.
  $vm_cpus = `cat /proc/cpuinfo | grep 'core id' | sort -u | wc -l`.to_i
  if $vm_cpus < 1
      $vm_cpus = `nproc`.to_i
  end
else # sorry Windows folks, I can't help you
  $vm_cpus = 4
end
end

